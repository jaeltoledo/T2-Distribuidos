// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	Bienvenida(ctx context.Context, in *MensajeBienvenida, opts ...grpc.CallOption) (*MensajeBienvenida, error)
	EntreEtapas(ctx context.Context, in *MensajeEntreEtapas, opts ...grpc.CallOption) (*MensajeEntreEtapas, error)
	Etapa1(ctx context.Context, in *MensajeEtapa1, opts ...grpc.CallOption) (*MensajeEtapa1, error)
	SolicitudMonto(ctx context.Context, in *PedirMonto, opts ...grpc.CallOption) (*ResponderMonto, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Bienvenida(ctx context.Context, in *MensajeBienvenida, opts ...grpc.CallOption) (*MensajeBienvenida, error) {
	out := new(MensajeBienvenida)
	err := c.cc.Invoke(ctx, "/chat.ChatService/Bienvenida", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) EntreEtapas(ctx context.Context, in *MensajeEntreEtapas, opts ...grpc.CallOption) (*MensajeEntreEtapas, error) {
	out := new(MensajeEntreEtapas)
	err := c.cc.Invoke(ctx, "/chat.ChatService/EntreEtapas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) Etapa1(ctx context.Context, in *MensajeEtapa1, opts ...grpc.CallOption) (*MensajeEtapa1, error) {
	out := new(MensajeEtapa1)
	err := c.cc.Invoke(ctx, "/chat.ChatService/Etapa1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SolicitudMonto(ctx context.Context, in *PedirMonto, opts ...grpc.CallOption) (*ResponderMonto, error) {
	out := new(ResponderMonto)
	err := c.cc.Invoke(ctx, "/chat.ChatService/solicitudMonto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	Bienvenida(context.Context, *MensajeBienvenida) (*MensajeBienvenida, error)
	EntreEtapas(context.Context, *MensajeEntreEtapas) (*MensajeEntreEtapas, error)
	Etapa1(context.Context, *MensajeEtapa1) (*MensajeEtapa1, error)
	SolicitudMonto(context.Context, *PedirMonto) (*ResponderMonto, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) Bienvenida(context.Context, *MensajeBienvenida) (*MensajeBienvenida, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bienvenida not implemented")
}
func (UnimplementedChatServiceServer) EntreEtapas(context.Context, *MensajeEntreEtapas) (*MensajeEntreEtapas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntreEtapas not implemented")
}
func (UnimplementedChatServiceServer) Etapa1(context.Context, *MensajeEtapa1) (*MensajeEtapa1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Etapa1 not implemented")
}
func (UnimplementedChatServiceServer) SolicitudMonto(context.Context, *PedirMonto) (*ResponderMonto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolicitudMonto not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_Bienvenida_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MensajeBienvenida)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Bienvenida(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/Bienvenida",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Bienvenida(ctx, req.(*MensajeBienvenida))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_EntreEtapas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MensajeEntreEtapas)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).EntreEtapas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/EntreEtapas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).EntreEtapas(ctx, req.(*MensajeEntreEtapas))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_Etapa1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MensajeEtapa1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Etapa1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/Etapa1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Etapa1(ctx, req.(*MensajeEtapa1))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SolicitudMonto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PedirMonto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SolicitudMonto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/solicitudMonto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SolicitudMonto(ctx, req.(*PedirMonto))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bienvenida",
			Handler:    _ChatService_Bienvenida_Handler,
		},
		{
			MethodName: "EntreEtapas",
			Handler:    _ChatService_EntreEtapas_Handler,
		},
		{
			MethodName: "Etapa1",
			Handler:    _ChatService_Etapa1_Handler,
		},
		{
			MethodName: "solicitudMonto",
			Handler:    _ChatService_SolicitudMonto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
